# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
import sqlite3
import logging
import time
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)

# –ò–º–ø–æ—Ä—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫
from config import BOT_TOKEN
from db import init_db, get_db
import payment
import ai_analyzer

# === –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
scheduler = AsyncIOScheduler()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")],
        [KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")],
        [KeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")],
        [KeyboardButton(text="üì¨ –û—Ç—á—ë—Ç")],
        [KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")]
    ],
    resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if message.text.startswith("/start ref"):
        ref_id = message.text.split(" ")[1].replace("ref", "")
        try:
            await bot.send_message(int(ref_id), "üéÅ –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –°–ø–∞—Å–∏–±–æ!")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–æ–≤–æ–¥–∞ {ref_id}: {e}")

    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (id, first_name, start_date) VALUES (?, ?, ?)",
                (user_id, first_name, datetime.now().date().isoformat()))
    conn.commit()
    conn.close()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
        "–Ø ‚Äî Habitly, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
        "–ü–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "‚Ä¢ –ó–∞–≤–æ–¥–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "‚Ä¢ –ù–µ —Å—Ä—ã–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ—Ç –ò–ò\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å:", reply_markup=main_kb
    )

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ ---
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def add_habit_prompt(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Å—Ç–∏:\n–ù–∞–ø—Ä–∏–º–µ—Ä: *–ü–∏—Ç—å –≤–æ–¥—É*, *–ß–∏—Ç–∞—Ç—å 10 –º–∏–Ω*, *–ù–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å*")

@router.message(F.text.func(lambda text: text not in ["‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", "üì¨ –û—Ç—á—ë—Ç", "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"]))
async def save_habit(message: types.Message):
    user_id = message.from_user.id
    habit_name = message.text.strip()

    if len(habit_name) < 2 or len(habit_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ.")
        return

    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT INTO habits (user_id, name, created_at) VALUES (?, ?, ?)",
                (user_id, habit_name, datetime.now().date().isoformat()))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# --- –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
@router.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def mark_habit(message: types.Message):
    user_id = message.from_user.id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM habits WHERE user_id = ?", (user_id,))
    habits = cur.fetchall()
    conn.close()

    if not habits:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É —á–µ—Ä–µ–∑ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'")
        return

    kb = InlineKeyboardBuilder()
    for h_id, name in habits:
        kb.add(InlineKeyboardButton(text=name, callback_data=f"mark_{h_id}"))
    kb.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("mark_"))
async def mark_done(callback: types.CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    today = datetime.now().date().isoformat()

    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO completions (habit_id, date) VALUES (?, ?)", (habit_id, today))
    conn.commit()
    conn.close()

    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! üéâ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞.")
    await callback.message.delete()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@router.message(F.text == "üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT h.name, COUNT(c.id) 
        FROM habits h 
        LEFT JOIN completions c ON h.id = c.habit_id AND c.date >= date('now', '-7 days')
        WHERE h.user_id = ?
        GROUP BY h.id
    """, (user_id,))
    stats = cur.fetchall()
    conn.close()

    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π.")
        return

    text = "üìà –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for name, count in stats:
        text += f"üîπ {name}: {count}/7 –¥–Ω–µ–π\n"

    await message.answer(text)

# --- –û—Ç—á—ë—Ç ---
@router.message(F.text == "üì¨ –û—Ç—á—ë—Ç")
async def request_report(message: types.Message):
    user_id = message.from_user.id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT premium_until FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()

    if not row or not row[0]:
        conn.close()
        await message.answer("–û—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ù–∞–∂–º–∏ 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞'")
        return

    try:
        premium_until = datetime.strptime(row[0], "%Y-%m-%d").date()
    except (ValueError, TypeError):
        conn.close()
        await message.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if premium_until < datetime.now().date():
        conn.close()
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã.")
        return

    cur.execute("""
        SELECT h.name, COUNT(c.id) 
        FROM habits h 
        LEFT JOIN completions c ON h.id = c.habit_id AND c.date >= date('now', '-7 days')
        WHERE h.user_id = ?
        GROUP BY h.id
    """, (user_id,))
    stats = cur.fetchall()
    conn.close()

    if not stats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ—Ç–º–µ—á–∞–π –∏—Ö.")
        return

    stats_text = ", ".join([f"{name}: {count} —Ä–∞–∑" for name, count in stats])
    report = ai_analyzer.get_ai_insight(stats_text)
    await message.answer(f"üì¨ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n{report}")

# --- –ü–æ–¥–ø–∏—Å–∫–∞ ---
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def send_subscription_info(message: types.Message):
    user_id = message.from_user.id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT premium_until, trial_used FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        trial_used = 0
        premium_until = None
    else:
        premium_until_str, trial_used = row
        try:
            premium_until = datetime.strptime(premium_until_str, "%Y-%m-%d").date() if premium_until_str else None
        except (ValueError, TypeError):
            premium_until = None

    now = datetime.now().date()
    if premium_until and premium_until > now:
        await message.answer(f"‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {premium_until}")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial")],
        [InlineKeyboardButton(text="üí≥ 199 —Ä—É–±/–º–µ—Å", callback_data="pay")]
    ])

    await message.answer("–ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫:\n"
                         "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º –ò–ò-–æ—Ç—á—ë—Ç–∞–º\n"
                         "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º\n"
                         "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ\n\n"
                         "–í—ã–±–µ—Ä–∏:", reply_markup=kb)

@router.callback_query(F.data == "trial")
async def start_trial(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT trial_used FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    trial_used = row[0] if row else 0

    if trial_used:
        await callback.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    else:
        new_date = (datetime.now().date() + timedelta(days=3)).isoformat()
        cur.execute("UPDATE users SET premium_until = ?, trial_used = 1 WHERE id = ?", (new_date, user_id))
        conn.commit()
        await callback.message.edit_text("üéâ –£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç—á—ë—Ç—ã –æ—Ç –ò–ò.")
    conn.close()

@router.callback_query(F.data == "pay")
async def pay(callback: types.CallbackQuery):
    await payment.create_invoice(callback.message)

# --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ---
@router.message(F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def ref_link(message: types.Message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/HabitlyTrackerBot?start=ref{user_id}"
    text = (
        f"üåü –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        f"–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å 30% —Å–∫–∏–¥–∫–∏!\n\n"
        f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{ref_link}</code>\n\n"
        f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await message.answer(text, parse_mode="HTML")
    await message.answer(ref_link)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è) ---
@router.message(Command("stats"))
async def stats(message: types.Message):
    # üîê –¢–≤–æ–π ID
    MY_ID = 1477841285

    if message.from_user.id != MY_ID:
        return

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    total = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM users WHERE premium_until > date('now')")
    paid = cur.fetchone()[0]
    conn.close()

    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
                        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {paid}")

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
async def send_daily_reminder():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT DISTINCT h.user_id FROM habits h
        WHERE h.user_id NOT IN (
            SELECT h2.user_id FROM habits h2
            JOIN completions c ON h2.id = c.habit_id
            WHERE c.date = date('now')
        )
    """)
    users = cur.fetchall()
    conn.close()

    for (user_id,) in users:
        try:
            await bot.send_message(user_id, "üîî –ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–µ –æ—Ç–º–µ—á–∞–ª –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è. –ù–µ —Å–¥–∞–≤–∞–π—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å –æ–¥–Ω—É!")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")

scheduler.add_job(send_daily_reminder, 'cron', hour=20, minute=0)

# --- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ---
async def send_weekly_digest():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT u.id, u.first_name,
               GROUP_CONCAT(h.name || ': ' || COUNT(c.id)) as stats
        FROM users u
        JOIN habits h ON u.id = h.user_id
        LEFT JOIN completions c ON h.id = c.habit_id AND c.date >= date('now', '-7 days')
        WHERE u.premium_until > date('now')
        GROUP BY u.id
    """)
    users = cur.fetchall()
    conn.close()

    for user_id, name, stats_data in users:
        if stats_data:
            report = ai_analyzer.get_ai_insight(stats_data)
            try:
                await bot.send_message(user_id, f"üì¨ –¢–≤–æ–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç, {name}:\n\n{report}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

scheduler.add_job(send_weekly_digest, 'cron', day_of_week='sun', hour=10, minute=0)

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é ---
async def send_daily_stats():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    total = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM users WHERE premium_until > date('now')")
    paid = cur.fetchone()[0]
    conn.close()

    # üîê –¢–≤–æ–π ID
    my_id = 1477841285

    try:
        await bot.send_message(
            my_id,
            f"üìà **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {paid}\n\n"
            f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü—Ä–æ–¥–≤–∏–≥–∞–π –¥–∞–ª—å—à–µ! üí™",
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

# –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
scheduler.add_job(send_daily_stats, 'cron', hour=9, minute=0)

# === –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –ë–û–î–†–°–¢–í–û–í–ê–ù–ò–Ø ===
from flask import Flask

app = Flask('')

@app.route('/')
def home():
    return "‚úÖ HabitlyBot —Ä–∞–±–æ—Ç–∞–µ—Ç. –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω."

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server = Thread(target=run)
    server.daemon = True
    server.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    timer = Thread(target=lambda: _timer_loop())
    timer.daemon = True
    timer.start()

def _timer_loop():
    while True:
        print(f"‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... {time.strftime('%H:%M:%S')}")
        time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
# === –ö–û–ù–ï–¶ –í–ï–ë-–°–ï–†–í–ï–†–ê ===

# === –ó–∞–ø—É—Å–∫ ===
dp.include_router(router)
payment.set_bot(bot)

async def main():
    init_db()
    scheduler.start()
    keep_alive()  # ‚Üê –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ —Ç–∞–π–º–µ—Ä
    print("‚úÖ Habitly –∑–∞–ø—É—â–µ–Ω. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
