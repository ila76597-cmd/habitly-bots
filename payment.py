from aiogram import Bot
from aiogram.types import Message
import yookassa
from yookassa import Payment
import uuid
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

yookassa.Configuration.account_id = YOOKASSA_SHOP_ID
yookassa.Configuration.secret_key = YOOKASSA_SECRET_KEY

bot_instance = None

def set_bot(bot: Bot):
    global bot_instance
    bot_instance = bot
    logger.info("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ –º–æ–¥—É–ª—å –æ–ø–ª–∞—Ç—ã")

async def create_invoice(message: Message):
    global bot_instance

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    try:
        payment = Payment.create({
            "amount": {
                "value": "199.00",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/HabitlyTrackerBot"
            },
            "capture": True,
            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤—ã—á–µ–∫"
        }, uuid.uuid4())

        confirmation_url = payment.confirmation.confirmation_url
        await message.answer(
            "üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É:\n"
            f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({confirmation_url})",
            parse_mode="Markdown"
        )

        await asyncio.sleep(600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç

        updated = Payment.find_one(payment.id)
        logger.info(f"–ü–ª–∞—Ç—ë–∂ ID: {payment.id}, –°—Ç–∞—Ç—É—Å: {updated.status}, –û–ø–ª–∞—á–µ–Ω–æ: {updated.paid}")

        if updated.paid:
            user_id = message.from_user.id
            from db import get_db
            conn = get_db()
            cur = conn.cursor()
            from datetime import datetime, timedelta
            new_date = (datetime.now().date() + timedelta(days=30)).isoformat()
            cur.execute("UPDATE users SET premium_until = ?, trial_used = 1 WHERE id = ?", (new_date, user_id))
            conn.commit()
            conn.close()

            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {new_date}")

            if bot_instance:
                try:
                    await bot_instance.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –ò–ò-–æ—Ç—á—ë—Ç–∞–º –æ—Ç–∫—Ä—ã—Ç.")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}")